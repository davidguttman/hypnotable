// Generated by CoffeeScript 1.6.3
(function() {
  var RowStream, addSort, bean, createRowElement, normalizeColumns, stringToElement, templates;

  templates = require('./templates');

  RowStream = require('./row-stream');

  bean = require('bean');

  stringToElement = function(str) {
    var clean, div, els;
    clean = str.replace(/(^\s+)|(\s+$)/g, '');
    div = document.createElement('div');
    div.innerHTML = clean;
    els = div.childNodes;
    if (els.length === 1) {
      return els[0];
    } else {
      return els;
    }
  };

  createRowElement = function(str) {
    var tr;
    tr = document.createElement('tr');
    tr.innerHTML = str;
    return tr;
  };

  module.exports = function(columns) {
    var $table, $tbody, html, rowStream;
    normalizeColumns(columns);
    html = templates.table.render({
      columns: columns
    });
    $table = stringToElement(html);
    $tbody = $table.querySelector('tbody');
    rowStream = RowStream(columns);
    rowStream.on('data', function(cells) {
      var tr;
      html = templates.row.render({
        cells: cells
      });
      tr = createRowElement(html);
      return $tbody.appendChild(tr);
    });
    addSort($table);
    rowStream.el = $table;
    return rowStream;
  };

  normalizeColumns = function(columns) {
    var column, _i, _len, _results;
    _results = [];
    for (_i = 0, _len = columns.length; _i < _len; _i++) {
      column = columns[_i];
      _results.push(column.title != null ? column.title : column.title = column.property);
    }
    return _results;
  };

  addSort = function(table) {
    var curSort, reverse, tbody;
    tbody = table.querySelector('tbody');
    curSort = null;
    reverse = false;
    return bean.on(table, 'click', 'th', function(event) {
      var className, el, row, rows, _i, _j, _len, _len1, _ref, _results;
      el = this;
      className = el.getAttribute('class');
      rows = [];
      _ref = tbody.childNodes;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        el = _ref[_i];
        rows.push(el);
      }
      if (className === curSort) {
        reverse = !reverse;
      } else {
        reverse = false;
      }
      rows.sort(function(a, b) {
        var av, bv, r, _ref1;
        _ref1 = [a, b].map(function(cell) {
          var err, val;
          val = cell.querySelector('.' + className).dataset.value;
          try {
            return JSON.parse(val);
          } catch (_error) {
            err = _error;
            return val;
          }
        }), av = _ref1[0], bv = _ref1[1];
        if (reverse) {
          r = -1;
        } else {
          r = 1;
        }
        if (av > bv) {
          return 1 * r;
        }
        if (bv > av) {
          return -1 * r;
        }
        return 0;
      });
      curSort = className;
      tbody.innerHTML = '';
      _results = [];
      for (_j = 0, _len1 = rows.length; _j < _len1; _j++) {
        row = rows[_j];
        _results.push(tbody.appendChild(row));
      }
      return _results;
    });
  };

}).call(this);
